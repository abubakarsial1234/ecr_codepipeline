name: Deploy to AWS

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create ECR repos if not exists
        run: |
          for REPO in backend frontend; do
            if ! aws ecr describe-repositories --repository-names $REPO >/dev/null 2>&1; then
              echo "Creating ECR repo: $REPO"
              aws ecr create-repository --repository-name $REPO
            else
              echo "ECR repo $REPO exists"
            fi
          done

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build & Push Backend
        run: |
          docker build -t backend ./backend
          docker tag backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      - name: Build & Push Frontend
        run: |
          docker build -t frontend ./frontend
          docker tag frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest

      - name: Create ECS Cluster if not exists
        run: |
          CLUSTER_NAME="my-app-cluster"
          STATUS=$(aws ecs describe-clusters --clusters "$CLUSTER_NAME" --query "clusters[0].status" --output text 2>/dev/null)
          if [ "$STATUS" != "ACTIVE" ]; then
            echo "Cluster not found. Creating..."
            aws ecs create-cluster --cluster-name "$CLUSTER_NAME"
          else
            echo "Cluster already exists."
          fi

          # Wait until cluster is active
          STATUS=""
          while [ "$STATUS" != "ACTIVE" ]; do
            STATUS=$(aws ecs describe-clusters --clusters "$CLUSTER_NAME" --query "clusters[0].status" --output text 2>/dev/null)
            echo "Cluster status: $STATUS"
            sleep 5
          done
          echo "Cluster is active!"

      - name: Create ECS Execution Role if not exists
        run: |
          ROLE_NAME="ecsTaskExecutionRole"
          if ! aws iam get-role --role-name $ROLE_NAME >/dev/null 2>&1; then
            aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": { "Service": "ecs-tasks.amazonaws.com" },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'
          fi
          aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

      - name: Register Backend Task
        run: |
          cat > backend-task.json << 'EOF'
          {
            "family": "backend-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "backend",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest",
                "essential": true,
                "portMappings": [ { "containerPort": 5000, "protocol": "tcp" } ]
              }
            ]
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://backend-task.json

      - name: Register Frontend Task
        run: |
          cat > frontend-task.json << 'EOF'
          {
            "family": "frontend-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "frontend",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest",
                "essential": true,
                "portMappings": [ { "containerPort": 3000, "protocol": "tcp" } ]
              }
            ]
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://frontend-task.json

      - name: Update ECS Services
        run: |
          SUBNETS="${{ secrets.AWS_SUBNET_ID }}"   # comma-separated if multiple
          SG="${{ secrets.AWS_SECURITY_GROUP_ID }}" 

          # Backend service
          if ! aws ecs describe-services --cluster my-app-cluster --services backend-service --query "services[0].status" --output text >/dev/null 2>&1; then
            aws ecs create-service \
              --cluster my-app-cluster \
              --service-name backend-service \
              --task-definition backend-task \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG],assignPublicIp=ENABLED}"
          else
            aws ecs update-service \
              --cluster my-app-cluster \
              --service backend-service \
              --task-definition backend-task
          fi

          # Frontend service
          if ! aws ecs describe-services --cluster my-app-cluster --services frontend-service --query "services[0].status" --output text >/dev/null 2>&1; then
            aws ecs create-service \
              --cluster my-app-cluster \
              --service-name frontend-service \
              --task-definition frontend-task \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG],assignPublicIp=ENABLED}"
          else
            aws ecs update-service \
              --cluster my-app-cluster \
              --service frontend-service \
              --task-definition frontend-task
