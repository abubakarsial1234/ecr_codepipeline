name: Deploy to AWS

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # <-- Apni AWS Access Key yaha
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # <-- Apni AWS Secret Key yaha
          aws-region: us-east-1  # <-- Apni AWS region yaha

      - name: Create ECR repos
        run: |
          aws ecr describe-repositories --repository-names backend || aws ecr create-repository --repository-name backend
          aws ecr describe-repositories --repository-names frontend || aws ecr create-repository --repository-name frontend

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com  # <-- Apna AWS Account ID yaha

      - name: Build & Push Backend
        run: |
          docker build -t backend ./backend
          docker tag backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      - name: Build & Push Frontend
        run: |
          docker build -t frontend ./frontend
          docker tag frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest

      - name: Create ECS Cluster
        run: |
          aws ecs describe-clusters --clusters my-app-cluster || aws ecs create-cluster --cluster-name my-app-cluster

      - name: Create ECS Execution Role
        run: |
          ROLE_NAME="ecsTaskExecutionRole"
          aws iam get-role --role-name $ROLE_NAME || \
          aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": "ecs-tasks.amazonaws.com" },
                "Action": "sts:AssumeRole"
              }
            ]
          }'
          aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

      - name: Register Backend Task
        run: |
          cat > backend-task.json << 'EOF'
          {
            "family": "backend-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "backend",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest",
                "essential": true,
                "portMappings": [ { "containerPort": 5000, "protocol": "tcp" } ]
              }
            ]
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://backend-task.json

      - name: Register Frontend Task
        run: |
          cat > frontend-task.json << 'EOF'
          {
            "family": "frontend-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "frontend",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest",
                "essential": true,
                "portMappings": [ { "containerPort": 3000, "protocol": "tcp" } ]
              }
            ]
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://frontend-task.json

      - name: Update ECS Services
        run: |
          # Backend service
          aws ecs update-service --cluster my-app-cluster --service backend-service --task-definition backend-task || \
          aws ecs create-service \
            --cluster my-app-cluster \
            --service-name backend-service \
            --task-definition backend-task \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-03c2551165fa51fbb],securityGroups=[sg-0099d6aef13949c30],assignPublicIp=ENABLED}"  # <-- Apne subnet aur security group IDs yaha

          # Frontend service
          aws ecs update-service --cluster my-app-cluster --service frontend-service --task-definition frontend-task || \
          aws ecs create-service \
            --cluster my-app-cluster \
            --service-name frontend-service \
            --task-definition frontend-task \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-03c2551165fa51fbb],securityGroups=[sg-0099d6aef13949c30],assignPublicIp=ENABLED}"  # <-- Apne subnet aur security group IDs yaha